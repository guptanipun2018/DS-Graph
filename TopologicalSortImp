import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;

public class TopologicalSortImp {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int vertices=Integer.parseInt(br.readLine());
        int edges = Integer.parseInt(br.readLine());
        ArrayList<ArrayList<Integer>> graph = new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<vertices;i++){
            graph.add(new ArrayList<Integer>());
        }
        while(edges>0){
            String[] input = br.readLine().split(" ");
            int src = Integer.parseInt(input[0]);
            int dst = Integer.parseInt(input[1]);
            addEdge(graph,src,dst);
            edges--;
        }
        impTopologicalSort(graph,vertices);
    }
    public static void addEdge(ArrayList<ArrayList<Integer>> graph,int src,int dst){
        graph.get(src).add(dst);
//        graph.get(dst).add(src);
    }
    public static void impTopologicalSort(ArrayList<ArrayList<Integer>> graph,int vertices){
        boolean[] visited = new boolean[vertices];
        Arrays.fill(visited,false);
        Stack<Integer> st = new Stack<>();
        for(int i=0;i<visited.length;i++){
            if(!visited[i]){
                dfs(graph,visited,i,st);
            }
        }
        representStack(st);
    }
    public static void dfs(ArrayList<ArrayList<Integer>> graph, boolean[] visited, int currPos,Stack<Integer>st){

        visited[currPos]=true;
        for(int i:graph.get(currPos)){
            if(!visited[i]){
                dfs(graph,visited,i,st);
            }
        }
        st.push(currPos);
    }
    public static void representStack(Stack<Integer> st){
        while(!st.isEmpty()){
            System.out.print(st.pop()+" ");
        }
    }
}
