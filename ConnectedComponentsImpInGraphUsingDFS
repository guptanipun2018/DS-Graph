import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;

public class ConnectedComponentsInGraph {public static void main(String[] args) throws IOException {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int vertices = Integer.parseInt(br.readLine());
    int edges = Integer.parseInt((br.readLine()));
    ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
    for(int ini=0; ini <vertices; ini++) {
        graph.add(new ArrayList<Integer>());
    }
    while(edges>0) {
        String[] input = br.readLine().split(" ");
        int src = Integer.parseInt(input[0]);
        int dst = Integer.parseInt(input[1]);
        addEdge(src, dst, graph);
        edges--;
    }
    int connectedComp = 0;
    int src=0;
    boolean[] visited = new boolean[vertices];
    Arrays.fill(visited,false);

    for(int i=0;i<vertices;i++){
        if(!visited[i]) {
            dfs(graph, visited, src);
            connectedComp++;
        }
    }
    System.out.print(connectedComp);

}
    public static void dfs(ArrayList<ArrayList<Integer>> graph, boolean[] visited, int src){
        visited[src]=true;
        ArrayList<Integer> list = graph.get(src);
        for(int i:list){
            if(!visited[i])dfs(graph,visited,i);
        }
    }
    public static void addEdge(int src,int dst,ArrayList<ArrayList<Integer>> graph) {
        graph.get(src).add(dst);
        graph.get(dst).add(src);
    }

}
